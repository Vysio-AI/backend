// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Practitioner {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String   @unique
  firstName   String
  lastName    String
  phoneNumber String?
  auth0Sub    String   @unique
  clients     Client[]
  plans       Plan[]
  invites     Invite[]
}

model Client {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  email          String        @unique
  firstName      String
  lastName       String
  phoneNumber    String?
  imageUrl       String?
  auth0Sub       String        @unique
  sessions       Session[]
  plans          Plan[]
  Practitioner   Practitioner? @relation(fields: [practitionerId], references: [id])
  practitionerId Int?
}

model Session {
  id                       Int            @id @default(autoincrement())
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  startTime                DateTime
  endTime                  DateTime?
  sessionFrames            SessionFrame[]
  flags                    Flag[]
  Client                   Client         @relation(fields: [clientId], references: [id])
  clientId                 Int
  planId                   Int
  practitionerId           Int
  video                    Video?
  clientNotes              String?
  privatePractitionerNotes String?
  publicPractitionerNotes  String?
}

model SessionFrame {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  startTime  DateTime
  endTime    DateTime
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  Session    Session  @relation(fields: [sessionId], references: [id])
  sessionId  Int
  exerciseId Int
}

model Flag {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  time           DateTime
  notes          String?
  Session        Session  @relation(fields: [sessionId], references: [id])
  sessionId      Int
  clientId       Int
  practitionerId Int
}

model Video {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  fileName       String
  Session        Session  @relation(fields: [sessionId], references: [id])
  sessionId      Int      @unique
  clientId       Int
  practitionerId Int
}

enum ActivityType {
  PENDULUM
  ABDUCTION
  FORWARD_ELEVATION
  INTERNAL_ROTATION
  EXTERNAL_ROTATION
  TRAPEZIUS_EXTENSION
  UPRIGHT_ROW
}

model Exercise {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  activityType  ActivityType
  duration      Int
  Plan          Plan           @relation(fields: [planId], references: [id])
  planId        Int
  sessionFrames SessionFrame[]
}

model Plan {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  active         Boolean      @default(false)
  activatedAt    DateTime?
  deactivatedAt  DateTime?
  repetitions    Int
  name           String
  timeframe      TimeFrame
  Practitioner   Practitioner @relation(fields: [practitionerId], references: [id])
  practitionerId Int
  clients        Client[]
  exercises      Exercise[]
}

enum TimeFrame {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum InviteStatus {
  QUEUED
  SENT
  FAILED
  COMPLETED
  EXPIRED
}

model Invite {
  id              Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  expiry          DateTime     @default(dbgenerated("NOW() + interval '1 week'"))
  status          InviteStatus @default(QUEUED)
  Practitioner    Practitioner @relation(fields: [practitionerId], references: [id])
  practitionerId  Int
  clientEmail     String       @unique
  clientFirstName String
  clientLastName  String
  referralCode    String       @unique
}
